{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { RNImageColors } from \"./module\";\nimport { cache } from \"./cache\";\nvar MAX_KEY_LEN = 500;\n\nvar resolveImageSource = function resolveImageSource(source) {\n  if (typeof source === 'string') {\n    return source;\n  } else {\n    return Image.resolveAssetSource(source).uri;\n  }\n};\n\nvar getColors = function getColors(source, config) {\n  var resolvedSrc, cachedResult, result, _config$key;\n\n  return _regeneratorRuntime.async(function getColors$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          resolvedSrc = resolveImageSource(source);\n\n          if (!(config !== null && config !== void 0 && config.cache)) {\n            _context.next = 5;\n            break;\n          }\n\n          cachedResult = config.key ? cache.getItem(config.key) : cache.getItem(resolvedSrc);\n\n          if (!cachedResult) {\n            _context.next = 5;\n            break;\n          }\n\n          return _context.abrupt(\"return\", cachedResult);\n\n        case 5:\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(RNImageColors.getColors(resolvedSrc, config));\n\n        case 7:\n          result = _context.sent;\n\n          if (!(config !== null && config !== void 0 && config.cache)) {\n            _context.next = 12;\n            break;\n          }\n\n          if (!(!config.key && resolvedSrc.length > MAX_KEY_LEN)) {\n            _context.next = 11;\n            break;\n          }\n\n          throw new Error(\"You enabled caching, but you didn't pass a key. We fallback to using the image URI as the key. However the URI is longer than \" + MAX_KEY_LEN + \". Please pass a short unique key.\");\n\n        case 11:\n          cache.setItem((_config$key = config.key) !== null && _config$key !== void 0 ? _config$key : resolvedSrc, result);\n\n        case 12:\n          return _context.abrupt(\"return\", result);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar ImageColors = {\n  getColors: getColors,\n  cache: cache\n};\nexport default ImageColors;","map":{"version":3,"sources":["index.ts"],"names":["MAX_KEY_LEN","resolveImageSource","source","Image","getColors","resolvedSrc","config","cachedResult","cache","result","RNImageColors","ImageColors"],"mappings":";;AACA,SAAA,aAAA;AACA,SAAA,KAAA;AAIA,IAAMA,WAAW,GAAjB,GAAA;;AAEA,IAAMC,kBAAkB,GAAIC,SAAtBD,kBAAsBC,CAAAA,MAAD,EAAiD;AAC1E,MAAI,OAAA,MAAA,KAAJ,QAAA,EAAgC;AAC9B,WAAA,MAAA;AADF,GAAA,MAEO;AACL,WAAOC,KAAK,CAALA,kBAAAA,CAAAA,MAAAA,EAAP,GAAA;AACD;AALH,CAAA;;AAQA,IAAMC,SAA2C,GAAG,SAA9CA,SAA8C,CAAA,MAAA,EAAA,MAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC5CC,UAAAA,WAD4C,GAC9BJ,kBAAkB,CAAtC,MAAsC,CADY;;AAAA,gBAG9CK,MAAJ,KAAA,IAAIA,IAAAA,MAAJ,KAAA,KAAA,CAAIA,IAAAA,MAAM,CAAV,KAHkD;AAAA;AAAA;AAAA;;AAI1CC,UAAAA,YAJ0C,GAI3BD,MAAM,CAANA,GAAAA,GACjBE,KAAK,CAALA,OAAAA,CAAcF,MAAM,CADHA,GACjBE,CADiBF,GAEjBE,KAAK,CAALA,OAAAA,CAFJ,WAEIA,CAN4C;;AAAA,eAQhD,YARgD;AAAA;AAAA;AAAA;;AAAA,2CAQ9B,YAR8B;;AAAA;AAAA;AAAA,2CAWVE,aAAa,CAAbA,SAAAA,CAAAA,WAAAA,EAAxC,MAAwCA,CAXU;;AAAA;AAW5CD,UAAAA,MAX4C;;AAAA,gBAgB9CH,MAAJ,KAAA,IAAIA,IAAAA,MAAJ,KAAA,KAAA,CAAIA,IAAAA,MAAM,CAAV,KAhBkD;AAAA;AAAA;AAAA;;AAAA,gBAiB5C,CAACA,MAAM,CAAP,GAAA,IAAeD,WAAW,CAAXA,MAAAA,GAAnB,WAjBgD;AAAA;AAAA;AAAA;;AAAA,gBAkBxC,IAAA,KAAA,oIAAN,WAAM,uCAlBwC;;AAAA;AAuBhDG,UAAAA,KAAK,CAALA,OAAAA,CAAAA,CAAAA,WAAAA,GAAcF,MAAM,CAApBE,GAAAA,MAAAA,IAAAA,IAAAA,WAAAA,KAAAA,KAAAA,CAAAA,GAAAA,WAAAA,GAAAA,WAAAA,EAAAA,MAAAA;;AAvBgD;AAAA,2CA0BlD,MA1BkD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApD;;AA6BA,IAAMG,WAAgC,GAAG;AACvCP,EAAAA,SADuC,EACvCA,SADuC;AAEvCI,EAAAA,KAAAA,EAAAA;AAFuC,CAAzC;AAKA,eAAA,WAAA","sourcesContent":["import { Image } from 'react-native'\nimport { RNImageColors } from './module'\nimport { cache } from './cache'\nimport type { ImageRequireSource } from 'react-native'\nimport type { ImageColorsResult, RNImageColorsModule } from './types'\n\nconst MAX_KEY_LEN = 500\n\nconst resolveImageSource = (source: string | ImageRequireSource): string => {\n  if (typeof source === 'string') {\n    return source\n  } else {\n    return Image.resolveAssetSource(source).uri\n  }\n}\n\nconst getColors: RNImageColorsModule['getColors'] = async (source, config) => {\n  const resolvedSrc = resolveImageSource(source)\n\n  if (config?.cache) {\n    const cachedResult = config.key\n      ? cache.getItem(config.key)\n      : cache.getItem(resolvedSrc)\n\n    if (cachedResult) return cachedResult\n  }\n\n  const result: ImageColorsResult = await RNImageColors.getColors(\n    resolvedSrc,\n    config\n  )\n\n  if (config?.cache) {\n    if (!config.key && resolvedSrc.length > MAX_KEY_LEN) {\n      throw new Error(\n        `You enabled caching, but you didn't pass a key. We fallback to using the image URI as the key. However the URI is longer than ${MAX_KEY_LEN}. Please pass a short unique key.`\n      )\n    }\n\n    cache.setItem(config.key ?? resolvedSrc, result)\n  }\n\n  return result\n}\n\nconst ImageColors: RNImageColorsModule = {\n  getColors,\n  cache,\n}\n\nexport default ImageColors\n"]},"metadata":{},"sourceType":"module"}