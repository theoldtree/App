{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Vibrant from 'node-vibrant';\n\nvar getQuality = function getQuality(quality) {\n  switch (quality) {\n    case 'lowest':\n      return 10;\n\n    case 'low':\n      return 5;\n\n    case 'high':\n      return 1.333;\n\n    case 'highest':\n      return 1;\n\n    default:\n      return getQuality('low');\n  }\n};\n\nvar getDominantSwatch = function getDominantSwatch(palette) {\n  var dominant = palette[0];\n  var highestPopulation = -1;\n  var keys = Object.keys(palette);\n\n  for (var index = 0; index < keys.length; index++) {\n    var key = keys[index];\n    var swatch = palette[key];\n\n    if (swatch && (swatch === null || swatch === void 0 ? void 0 : swatch.population) > highestPopulation) {\n      dominant = swatch;\n    }\n  }\n\n  return dominant;\n};\n\nexport var RNImageColors = {\n  getColors: function getColors(src, config) {\n    var _getDominantSwatch$he, _getDominantSwatch, _palette$Vibrant$hex, _palette$Vibrant, _palette$DarkVibrant$, _palette$DarkVibrant, _palette$LightVibrant, _palette$LightVibrant2, _palette$DarkMuted$he, _palette$DarkMuted, _palette$LightMuted$h, _palette$LightMuted, _palette$Muted$hex, _palette$Muted, fallback, img, vibrant, palette;\n\n    return _regeneratorRuntime.async(function getColors$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fallback = config.fallback;\n            img = new Image();\n            img.src = src;\n            img.crossOrigin = 'Anonymous';\n            vibrant = new Vibrant(img, {\n              useWorker: true,\n              quality: getQuality(config.quality)\n            });\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(vibrant.getPalette());\n\n          case 7:\n            palette = _context.sent;\n            return _context.abrupt(\"return\", {\n              dominant: (_getDominantSwatch$he = (_getDominantSwatch = getDominantSwatch(palette)) === null || _getDominantSwatch === void 0 ? void 0 : _getDominantSwatch.hex) !== null && _getDominantSwatch$he !== void 0 ? _getDominantSwatch$he : fallback,\n              vibrant: (_palette$Vibrant$hex = (_palette$Vibrant = palette.Vibrant) === null || _palette$Vibrant === void 0 ? void 0 : _palette$Vibrant.hex) !== null && _palette$Vibrant$hex !== void 0 ? _palette$Vibrant$hex : fallback,\n              darkVibrant: (_palette$DarkVibrant$ = (_palette$DarkVibrant = palette.DarkVibrant) === null || _palette$DarkVibrant === void 0 ? void 0 : _palette$DarkVibrant.hex) !== null && _palette$DarkVibrant$ !== void 0 ? _palette$DarkVibrant$ : fallback,\n              lightVibrant: (_palette$LightVibrant = (_palette$LightVibrant2 = palette.LightVibrant) === null || _palette$LightVibrant2 === void 0 ? void 0 : _palette$LightVibrant2.hex) !== null && _palette$LightVibrant !== void 0 ? _palette$LightVibrant : fallback,\n              darkMuted: (_palette$DarkMuted$he = (_palette$DarkMuted = palette.DarkMuted) === null || _palette$DarkMuted === void 0 ? void 0 : _palette$DarkMuted.hex) !== null && _palette$DarkMuted$he !== void 0 ? _palette$DarkMuted$he : fallback,\n              lightMuted: (_palette$LightMuted$h = (_palette$LightMuted = palette.LightMuted) === null || _palette$LightMuted === void 0 ? void 0 : _palette$LightMuted.hex) !== null && _palette$LightMuted$h !== void 0 ? _palette$LightMuted$h : fallback,\n              muted: (_palette$Muted$hex = (_palette$Muted = palette.Muted) === null || _palette$Muted === void 0 ? void 0 : _palette$Muted.hex) !== null && _palette$Muted$hex !== void 0 ? _palette$Muted$hex : fallback,\n              platform: 'web'\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["module.web.ts"],"names":["getQuality","quality","getDominantSwatch","palette","dominant","highestPopulation","keys","Object","index","key","swatch","RNImageColors","getColors","fallback","img","vibrant","useWorker","config","darkVibrant","lightVibrant","darkMuted","lightMuted","muted","platform"],"mappings":"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","sourcesContent":["import Vibrant from 'node-vibrant'\nimport type { Palette } from 'node-vibrant/lib/color'\nimport type { Config, WebImageColors } from './types'\n\nconst getQuality = (quality: Config['quality']): number => {\n  switch (quality) {\n    case 'lowest':\n      return 10\n    case 'low':\n      return 5\n    case 'high':\n      return 1.333\n    case 'highest':\n      return 1\n    default:\n      return getQuality('low') as number\n  }\n}\n\nconst getDominantSwatch = (palette: Palette) => {\n  let dominant = palette[0]\n  let highestPopulation = -1\n\n  const keys = Object.keys(palette)\n\n  for (let index = 0; index < keys.length; index++) {\n    const key = keys[index]\n    const swatch = palette[key]\n\n    if (swatch && swatch?.population > highestPopulation) {\n      dominant = swatch\n    }\n  }\n\n  return dominant\n}\n\nexport const RNImageColors = {\n  getColors: async (src: string, config: Config): Promise<WebImageColors> => {\n    const { fallback } = config\n\n    let img = new Image()\n    img.src = src\n    img.crossOrigin = 'Anonymous'\n\n    const vibrant = new Vibrant(img, {\n      useWorker: true,\n      quality: getQuality(config.quality),\n    })\n    const palette = await vibrant.getPalette()\n\n    return {\n      dominant: getDominantSwatch(palette)?.hex ?? fallback,\n      vibrant: palette.Vibrant?.hex ?? fallback,\n      darkVibrant: palette.DarkVibrant?.hex ?? fallback,\n      lightVibrant: palette.LightVibrant?.hex ?? fallback,\n      darkMuted: palette.DarkMuted?.hex ?? fallback,\n      lightMuted: palette.LightMuted?.hex ?? fallback,\n      muted: palette.Muted?.hex ?? fallback,\n      platform: 'web',\n    }\n  },\n}\n"]},"metadata":{},"sourceType":"module"}