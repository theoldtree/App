{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport styled from 'styled-components/native';\nimport { FlexCenterView, DefaultButton } from \"../../components/Styles/styles\";\nimport ImageColors from 'react-native-image-colors';\nexport default function ResultScreen() {\n  var uri = require(\"../../images/cat.png\");\n\n  function getResult() {\n    var result;\n    return _regeneratorRuntime.async(function getResult$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImageColors.getColors(uri, {\n              fallback: '#228B22',\n              cache: true,\n              key: 'unique_key'\n            }));\n\n          case 2:\n            result = _context.sent;\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  switch (result.platform) {\n    case 'android':\n      var vibrantColor = result.vibrant;\n      break;\n\n    case 'web':\n      var lightVibrantColor = result.lightVibrant;\n      break;\n\n    case 'ios':\n      var primaryColor = result.primary;\n      break;\n\n    default:\n      throw new Error('Unexpected platform key');\n  }\n\n  return React.createElement(FlexCenterView, null, React.createElement(ContentText, {\n    size: 20\n  }, \"ResultScreen\"), React.createElement(ContentText, {\n    size: 20\n  }, result));\n}\nvar ContentText = styled.Text(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n    font-size: \", \"\\n\"])), function (props) {\n  return props.size;\n});","map":{"version":3,"sources":["/Users/yujeongmu/Desktop/App/src/screens/Result/ResultScreen.js"],"names":["React","styled","FlexCenterView","DefaultButton","ImageColors","ResultScreen","uri","require","getResult","getColors","fallback","cache","key","result","platform","vibrantColor","vibrant","lightVibrantColor","lightVibrant","primaryColor","primary","Error","ContentText","Text","props","size"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,cAAT,EAAyBC,aAAzB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AAEA,eAAe,SAASC,YAAT,GAAwB;AAEnC,MAAMC,GAAG,GAAGC,OAAO,wBAAnB;;AAEA,WAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACyBJ,WAAW,CAACK,SAAZ,CAAsBH,GAAtB,EAA2B;AAC5CI,cAAAA,QAAQ,EAAE,SADkC;AAE5CC,cAAAA,KAAK,EAAE,IAFqC;AAG5CC,cAAAA,GAAG,EAAE;AAHuC,aAA3B,CADzB;;AAAA;AACUC,YAAAA,MADV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,UAAQA,MAAM,CAACC,QAAf;AACI,SAAK,SAAL;AAEI,UAAMC,YAAY,GAAGF,MAAM,CAACG,OAA5B;AACA;;AACJ,SAAK,KAAL;AAEI,UAAMC,iBAAiB,GAAGJ,MAAM,CAACK,YAAjC;AACA;;AACJ,SAAK,KAAL;AAEI,UAAMC,YAAY,GAAGN,MAAM,CAACO,OAA5B;AACA;;AACJ;AACI,YAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AAdR;;AAiBA,SACI,oBAAC,cAAD,QACI,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAE;AAAnB,oBADJ,EAEI,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAE;AAAnB,KAAwBR,MAAxB,CAFJ,CADJ;AAMH;AAED,IAAMS,WAAW,GAAGrB,MAAM,CAACsB,IAAV,kGACA,UAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,IAAV;AAAA,CADL,CAAjB","sourcesContent":["import React from 'react';\nimport { Text, View, Button } from 'react-native';\nimport styled from 'styled-components/native';\nimport { FlexCenterView, DefaultButton } from '../../components/Styles/styles';\nimport ImageColors from 'react-native-image-colors';\n\nexport default function ResultScreen() {\n\n    const uri = require('../../images/cat.png')\n\n    async function getResult() {\n        const result = await ImageColors.getColors(uri, {\n            fallback: '#228B22',\n            cache: true,\n            key: 'unique_key',\n        })\n    }\n\n    switch (result.platform) {\n        case 'android':\n            // android result properties\n            const vibrantColor = result.vibrant\n            break\n        case 'web':\n            // web result properties\n            const lightVibrantColor = result.lightVibrant\n            break\n        case 'ios':\n            // iOS result properties\n            const primaryColor = result.primary\n            break\n        default:\n            throw new Error('Unexpected platform key')\n    }\n\n    return (\n        <FlexCenterView>\n            <ContentText size={20}>ResultScreen</ContentText>\n            <ContentText size={20}>{result}</ContentText>\n        </FlexCenterView>\n    );\n}\n\nconst ContentText = styled.Text`\n    font-size: ${props => props.size}\n`"]},"metadata":{},"sourceType":"module"}